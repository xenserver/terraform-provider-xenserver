# Terraform Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - "v*"

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
      - uses: actions/setup-go@v6
        with:
          go-version-file: "go.mod"
          go-version: "1.24.1"
          cache: true
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Download and extract SDK
        shell: bash
        # If "XENSERVER_SDK_URL" is setup in the repository variable, will use it
        # as SDK URL, otherwise, will extract the SDK version from https://www.xenserver.com/downloads.
        # and download the SDK from https://github.com/xapi-project/xen-api/releases accordingly.
        # it will help to ignore the "Download Agreement" from the official XenServer SDK download page.
        run: |
          url=${{ vars.XENSERVER_SDK_URL }}
          if [ -z "$url" ]; then
            version=$(curl -s 'https://www.xenserver.com/downloads' | \
              grep -oE 'Software Development Kit \(SDK\) [0-9]+\.[0-9]+\.[0-9]+' | \
              grep -oE '[0-9]+\.[0-9]+\.[0-9]+$')
            url="https://github.com/xapi-project/xen-api/releases/download/v${version}/Go-SDK-prerelease-unsigned.zip"
          fi
          curl -L "$url" -o xenserver-sdk.zip
          unzip xenserver-sdk.zip -d sdk_temp
          mkdir -p goSDK
          mv sdk_temp/sdk_go/src/* goSDK/
          rm -rf sdk_temp xenserver-sdk.zip
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
